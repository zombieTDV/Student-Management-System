name: Lint, Test, Build & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write   # required for release publishing
  pages: write
  id-token: write

jobs:
  # ------------------------
  # Full checks â€” on push to main OR PR to main
  # ------------------------
  full-lint-and-test:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip "pip==25.2" 
          pip install pip-tools

      - name: Compile requirements
        run: |
          pip-compile --extra dev pyproject.toml --output-file=requirements.txt

      - name: Install fast dependencies
        run: |
          pip install -r requirements.txt
          pip install flake8 black mypy pytest pytest-html

      - name: Run flake8
        run: flake8 src

      - name: Run black check
        run: black --check src

      - name: Run mypy
        run: mypy --ignore-missing-imports src

      - name: Run unit tests and generate HTML report
        id: run-tests
        run: |
          # continue even if tests fail so we always produce the report
          set +e
          pytest -q tests/unit --html=pytest-report.html --self-contained-html
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Run integration tests
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: pytest -q tests/integration

      - name: Run Super-Linter
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        uses: github/super-linter@v5
        env:
          VALIDATE_PYTHON_MYPY: true
          PYTHON_MYPY_ARGS: "--no-install-types --ignore-missing-imports"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Prepare site for GitHub Pages (index + stable redirect)
      - name: Prepare site for GitHub Pages (index + stable redirect)
        if: always()
        run: |
          mkdir -p site
          # Put full pytest report at site/index.html
          cp pytest-report.html site/index.html

          # Create a stable /latest-report/ path that redirects to the index
          mkdir -p site/latest-report
          cat > site/latest-report/index.html <<'HTML'
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8" />
            <meta http-equiv="refresh" content="0; url=../index.html" />
            <meta name="viewport" content="width=device-width,initial-scale=1" />
            <title>Latest Pytest Report</title>
          </head>
          <body>
            <p>Redirecting to the latest pytest report. If your browser does not redirect automatically, <a href="../index.html">click here</a>.</p>
            <script>
              // JS fallback for the redirect
              window.location.replace('../index.html');
            </script>
          </body>
          </html>
          HTML

      # Upload only the Pages artifact (no separate generic artifact)
      - name: Upload site as Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v4
        with:
          path: site

  # ------------------------
  # Publish Pages (only on push to main)
  # ------------------------
  publish-pages:
    needs: full-lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add Pages URL and stable latest-report link to job summary
        if: always()
        run: |
          echo "### GitHub Pages: pytest report" >> $GITHUB_STEP_SUMMARY
          # Show repository URL for reference
          echo "Repo: https://github.com/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY

          # Compute stable latest-report link based on deployment output
          base="${{ steps.deployment.outputs.page_url }}"
          # Remove trailing slash (if any)
          base="${base%/}"
          echo "Latest-report: ${base}/latest-report/" >> $GITHUB_STEP_SUMMARY

  # ------------------------
  # Build & Release
  # ------------------------
  # build-and-release:
  #   runs-on: windows-latest
  #   needs: full-lint-and-test
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.12"
  #         cache: "pip"
  #         cache-dependency-path: requirements.txt

  #     - name: Install pip-tools
  #       run: |
  #         python -m pip install --upgrade pip "pip==25.2" setuptools wheel
  #         pip install pip-tools

  #     - name: Compile requirements
  #       run: |
  #         pip-compile pyproject.toml --output-file=requirements.txt

  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #         pip install pyinstaller

  #     - name: Build .exe with PyInstaller
  #       run: |
  #         pyinstaller --onefile --name "Case Y" main.py

  #     - name: Prepare artifact (zip exe)
  #       run: |
  #         if (Test-Path "./dist/Case Y.exe") {
  #           Compress-Archive -Path "./dist/Case Y.exe" -DestinationPath "./dist/Case-Y-v${{ github.run_number }}.zip"
  #         } else {
  #           Write-Error "Expected dist/Case Y.exe not found"
  #         }

  #     - name: Create GitHub Release and Upload Asset
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: v${{ github.run_number }}b
  #         name: Release v${{ github.run_number }}
  #         body: Automated build from ${{ github.sha }}
  #         files: ./dist/Case-Y-v${{ github.run_number }}.zip
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
